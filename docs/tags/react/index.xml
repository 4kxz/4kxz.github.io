<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Blog</title>
    <link>http://localhost:1313/tags/react/</link>
    <description>Recent content in React on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Nov 2024 11:50:05 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI-Powered Movie Tier List</title>
      <link>http://localhost:1313/posts/movie-recommendations/</link>
      <pubDate>Mon, 18 Nov 2024 11:50:05 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/movie-recommendations/</guid>
      
        <description>&lt;p&gt;Over the weekend, I built a movie recommendation app with a twist: instead of the usual 5-star ratings, users organize movies into tier lists (S/A/B/C/D) through drag-and-drop. As you rank movies, the app learns your preferences and suggests new ones. I wanted to explore what it&amp;rsquo;s like to build a full-stack application with AI assistance, particularly using ChatGPT.&lt;/p&gt;
&lt;h2 id=&#34;the-good-parts&#34;&gt;The Good Parts&lt;/h2&gt;
&lt;p&gt;The AI assistant really shined when it came to bootstrapping the project. It quickly generated solid boilerplate code for both the React frontend and Python FastAPI backend. The initial TypeScript interfaces, basic API routes, and UI component structure were all created with minimal back-and-forth.
The DND Kit integration for drag-and-drop functionality was particularly impressive. ChatGPT provided a working template that handled all the basic drag-and-drop operations, which I could then customize for my specific needs. It even included accessibility features like keyboard controls out of the box.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>